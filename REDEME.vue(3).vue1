开发的时候需要构建本地服务器环境，\从文件打开模式切换到服务器打开模式:
    需要实现模块化的开发与封装；
    需要实现文件的处理（sass转css等）
    代码的解析（ES6转ES5等）
    模块的打包（webpack操作）
    服务的启动（webpack-dev-server等）；




*安装和创建基于Vue的项目
    安装npm install -g vue-cli
        可以选择不同的Vue模板进行项目的搭建，比如simple、webpack-simple、webpack、browserify/browserify-simple等；
    1.通过命令vue init webpack-simple vue-cli 来实现webpack-simple模板的Vue项目的创建；
    2.进入vue-cli目录以后需要进行npm install模块内容的初始化操作；
    3.然后运行命令npm run dev就可以直接运行Vue初始化项目了，默认地址是http://localhost:8080
    目录：
        src 源文件（主要的Vue的组件是App.vue以及主要的入口文件是main.js）
        .babelrc 语法解析
        .editorconfig 这个编辑器的配置 
        .gitgnore 用于忽略文件
        index 首页
        webpack.config.js 前端自动化构建工具
        (可以先查看vue-cli的项目目录结构以及文件结构内容，需要注意的是.babelrc、.gitignore、package.json以及webpack.config.js等配置文件内容。当然，主要的Vue的组件是App.vue以及主要的入口文件是main.js；
        App.vue组件文件中主要包含三大部分template、script以及style来进行显示、逻辑与样式的处理；
        运行命令npm run build将会生成最终压缩优化后的build.js文件，这是生产环境下的文件内容，而项目目录下也会多出一个dist目录以及build.js文件)

bootstrap样式的网站
www.bootcdn.cn/bootstrap/
'app-header'==='appHeader'

    项目使用注意：
        不管在哪个组件定义style，都会造成全局的影响：
            要想只作用当前区域，需要：
                <style scoped></style>
         再组件中使用scss：
        <style lang="scss" scoped>$bg:#663399;div{border :5px solid $bg;}
            需要安装：
                cnpm install --save-dev sass-loader
                cnpm install --save-dev node-sass

props：['xxx']
    父组件给组件调用设置了一个属性xxx,子组件是引用props通过父组件传递的属性
    另外，父组件可以通过函数data ，进行v-bind属性绑定设置
    props可以设置成对象的形式：
    props：{
        name:{
            type:String,<--需要传递的类型-->
            required:true,
            default:'可以传默认值'
        },
        childName:{
          type:Function
        }
    }
    methods:{<--子组件-->
        childNameFuc:function(){
            this.childName("GUAL")<--通过函数让函数传递参数重置姓名来影响父组件-->
        }
    }
    methods:{<--父组件-->
        childName(req){ this.name=req}
    }
    <home-zi v-for="i in a" :key="i" :name="name" :childName="childName"></home-zi>
    改：使用emit方法
    <home-zi v-for="i in a" :key="i" :name="name" @childName="name=$event"></home-zi>
        methods:{<--子组件-->
            childNameFuc:function(){
                this.$emit("childName","GUAL")<--通过函数让函数传递参数重置姓名来影响父组件-->
            }
        }


小理解：
    1.组件之间存在嵌套关系，通常我们采用本地注册的方式，那个组件想要其他组件，就用components将它进行定义；
    2.一个组件想要传递数据给它的子组件，可以通过属性绑定的方式，比如v-bind：属性名称="属性值"
    3.子组件想要获取父组件传递过来的属性，需要t通过props的方式进行处理
    4.props可以设置成数组的形式，也可以用对象的形式。数组比较简单，不能够控制属性的类型、必选以及默认值
    5.子组件使用传递过来的属性 可以直接利用this.xxx就可以了
    
    子传父
    6.子组件需要传递数据到父组件，父组件需要属性绑定，绑定的对象可以是一个函数
    7.子组件就可以接收到父组件传递过来的函数属性，既然是函数，子组件就可以调用这个函数，并且传递参数
    8.父组件将子组件调用以后的结果进行进一步的赋值操作（———>父组件是可以接收到子组件传递回来的数据
    
    子传父 emit模式
    9.父组件可以进行事件的绑定@，意味着子组件去触发这个事件
    10.子组件件通过this.$emit("父组件@事件的名称"，“参数”)
    11.父组件通过$event事件对象进行接收

    非父    子组件之间的数据传递
    12.所有的Vue实例属于平级
    13.在第一个子组件里引入公交总站对象，但是我们需要对它进行$on的事件的侦听，如果侦听到事件触发，那么我们这里发生操作
    14.在第二个子组件引入公交总站对象，然后通过公交$emit，由第三方的公交总线去触发修改数据内容，意味这不需要组件嵌套的方式进行数据传递
    15.因为公交总线是一个Vue实例，我们也可以在公交总线里设置methods,那么，调用的时候就可以成为 公交总站.方法名称


想让<Home>内容</Home>引用组件中内容显示 ，要在那个组件通过slot 插槽 占位
    <slot name='p'></slot>  (—>)  <p slot="p">特定显示</p>


如果没有<keep-alive></keep-alive>进行激活状态的保持的话，
那么组件在切换的时候就会执行销毁操作，除非使用该标签，那么将会把组件一直保持激活状态
这个标签有两个生命周期：
        activated(){console.log('激活状态')}
        deactivated(){console.log('休眠');}

我们可以事件的触发，利用设置selectedComponent选中的组件，来实现动态组件的加载操作，在组件显示区域需要利用
<component :is="selectedComponent"><p>Default Content</p></component>通过:is来识别所选中的组件

小炸鸡：
     @click.prevent 阻止默认事件