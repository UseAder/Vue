//index3
new Vue({el:"",methods:{},computed:{},watch{}})
小说明：
minu ui
在外部既可以给vue的实例对象添加属性还可以调用vue的实例方法
vm1.$data===data (vue的实例对象vm1 的$data恒等与外部对象data)
给标签设置refs对象 ref="mya"
     在methods的方法中使用this.$refs可以输出所有绑定的ref {mya：a}
     类似于jq的id设置，可以获取到对象内容
在构建Vue实例时可以设置其template模板内容，
    再使用$mount来进行对象的加载，然后将“实例对象.$el 

 可以编写Vue的component，然后利用组件实现模块的重复使用操作   注意执行顺序
    component自定义组件第一个参数组件名称可变，
        第二个参数组件中data必需是函数,template书写多个标签，但它们必需包裹在一个根级组件内，每个标签都可绑定方法
    Vue.component('hellow',
        {
            data:function(){ return {status :"来临" }},
            template:`<h1>hellow :{{status}}</h1>`
        })
    小问题：为什么component组件中data必需是函数？
        因为data是对象的话，多个组件中data的数据调用就会重复，方法会公有化，这不是我们所希望的 ，所有我们用
        函数的形式将数据封装在当前的调用组件中，确保数据私有
    Vue.component可以看成是Vue的对象属性，我们可以把component以方法的形式添加入组件的实例中：
        让第二个参数组件对象化：
        var hellow={
            data:function(){ return {status :"来临" }},
            template:`<h1>hellow :{{status}}</h1>`
        }
        components:{"hellow":hellow}
        



Vue生命周期： 详见index4
    生命周期 lifecycle
    钩子函数 hook
    1.beforebefore 在。。。创建之前');
    2.created 创建
    3.beforeMount 在。。。安装之前
    4.mounted 安装
    5.updated 执行了一个更新
    6.beforeDestroy 在。。。销毁之前
    7.destroyed 销毁
    注意:在mounted之前，Vue的实例都是在内存中运行



     activated(){console.log('激活状态')}
     deactivated(){console.log('休眠');}


表单 
    1)不管是input、select、textarea全部可以用v-model进行双向数据绑定
    2):value+@input ===  v-model
    3)v-model.trim.number.lazy
    4)textarea的样式可以用white-spece：pre 进行换行内容的操作显示
    5)checkboxes我们设置的时候用v-model ，返回来的是array
    6)radio和input 操作一样，返回来的是一个数据内容
    7)select 里的option可以进行v-for循环 ，可以进行：value的数据值绑定，以及{{文本内容}}的显示，
        但是其选中值得改变需要用v-model在select里进行设置
    8)submit的click操作 ，可以连带prevent等修饰器
    9)可以自定义表单组件 父组件传入子组件的默认值内容为 props:['value'],子组件通过
        this.$emit('input',值)进行数据的传递操作
    10)自定义组件中的数据绑定同样用v-model
